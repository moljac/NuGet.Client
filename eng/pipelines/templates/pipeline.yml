variables:
  DOTNET_NOLOGO: 1

parameters:
- name: DartLabEnvironment
  displayName: DartLab Environment
  type: string
  default: Production
  values:
  - Production
  - Staging

resources:
  pipelines:
  - pipeline: DartLab
    source: DartLab
    branch: main
  repositories:
  - repository: DartLabTemplates
    type: git
    name: DartLab.Templates
    ref: refs/heads/main

stages:
- stage: Initialize
  jobs:
  - job: Initialize_Build_SemanticVersion
    timeoutInMinutes: 2
    pool:
      vmImage: windows-latest
      demands:
        - DotNetFramework
        - msbuild

    steps:
    - template: Initialize_Build_SemanticVersion.yml

  - job: Initialize_Build
    dependsOn: Initialize_Build_SemanticVersion
    timeoutInMinutes: 10
    variables:
      SemanticVersion: $[dependencies.Initialize_Build_SemanticVersion.outputs['setsemanticversion.SemanticVersion']]
      BuildRevision: $[counter(format('{0}.{1}', variables['SemanticVersion'], variables['build.definitionname']), 1)]

    pool:
      vmImage: windows-latest
      demands:
        - DotNetFramework
        - msbuild

    steps:
    - template: Initialize_Build.yml

- stage: Build
  dependsOn: Initialize
  jobs:
  - job: Build_and_UnitTest_NonRTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetMajorVersion: $[stageDependencies.Initialize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initialize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      LocalizedLanguageCount: "13"
      BuildRTM: "false"

    pool:
      name: VSEngSS-MicroBuild2019
      demands:
        - DotNetFramework
        - msbuild

    steps:
    - template: Build_and_UnitTest.yml

  - job: Build_and_UnitTest_RTM
    timeoutInMinutes: 170
    variables:
      BuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      VsTargetChannel: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.VsTargetChannel']]
      VsTargetMajorVersion: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.VsTargetMajorVersion']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      LocalizedLanguageCount: "13"
      BuildRTM: "true"

    pool:
      name: VSEngSS-MicroBuild2019
      demands:
        - DotNetFramework
        - msbuild

    steps:
    - template: Build_and_UnitTest.yml

- stage: FuncTests
  dependsOn: Initialize
  jobs:
  - job: Functional_Tests_On_Windows
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunFunctionalTestsOnWindows'], 'true')) "
    pool:
      name: VSEngSS-MicroBuild2019
      demands:
          - DotNetFramework
          - msbuild
    strategy:
      matrix:
        IsDesktop:
          SkipCoreAssemblies: "true"
        IsCore:
          SkipDesktopAssemblies: "true"

    steps:
    - template: Functional_Tests_On_Windows.yml

  - job: Tests_On_Linux
    timeoutInMinutes: 45
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
      MSBUILDDISABLENODEREUSE: 1
    condition: "and(succeeded(),eq(variables['RunTestsOnLinux'], 'true')) "
    pool:
      vmImage: ubuntu-latest
      demands: sh

    steps:
    - template: Tests_On_Linux.yml

- stage: MacTests
  dependsOn: Build
  jobs:
  - job: Tests_On_Mac
    timeoutInMinutes: 90
    variables:
      FULLVSTSBUILDNUMBER: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunTestsOnMac'], 'true')) "
    pool:
      vmImage: macos-latest

    steps:
    - template: Tests_On_Mac.yml

- stage: VSTests
  dependsOn: Build
  jobs:
  - job: End_To_End_Tests_On_Windows
    timeoutInMinutes: 100
    variables:
      FullVstsBuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunEndToEndTests'], 'true')) "
    pool:
      name: DDNuGet-Windows
      demands:
      - DotNetFramework
      - Allow_NuGet_E2E_Tests -equals true
    strategy:
      matrix:
        Part1:
          Part: "InstallPackageTest.ps1,UninstallPackageTest.ps1,UpdatePackageTest.ps1,PackageRestoreTest.ps1"
        Part2:
          Part: "A-TopDownloadedPackages.ps1,BuildIntegratedTest.ps1,ExecuteInitScriptTest.ps1,FindPackageTest.ps1,GetPackageTest.ps1,GetProjectTest.ps1,LegacyPackageRefProjectTest.ps1,NativeProjectTest.ps1,NetCoreProjectTest.ps1,PackTest.ps1,ProjectRetargeting.ps1,ServicesTest.ps1,Settings.ps1,SyncPackageTest.ps1,TabExpansionTest.ps1,UniversalWindowsProjectTest.ps1"

    steps:
    - template: End_To_End_Tests_On_Windows.yml

  - job: Apex_Tests_On_Windows
    timeoutInMinutes: 120
    variables:
      BuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.BuildNumber']]
      FullVstsBuildNumber: $[stageDependencies.Initiailize.Initialize_Build.outputs['updatebuildnumber.FullVstsBuildNumber']]
      SDKVersionForBuild: $[stageDependencies.Initiailize.Initialize_Build.outputs['getSDKVersionForBuild.SDKVersionForBuild']]
    condition: "and(succeeded(),eq(variables['RunApexTests'], 'true')) "
    pool:
      name: DDNuGet-Windows
      demands:
      - DotNetFramework
      - Allow_NuGet_Apex_Tests -equals true

    steps:
    - template: Apex_Tests_On_Windows.yml

- template: stages\visual-studio\single-runsettings.yml@DartLabTemplates
  parameters:
    displayName: OptProf Test Validation (no training)
    dependsOn: Build
    variables:
    - name: bootstrapperUrl
      value: $[stageDependencies.Build.Build_and_UnitTest_NonRTM.outputs['bootstrapperUrl']]
    runSettingsURI: $(Pipeline.Workspace)\RunSettings\NuGet.OptProfV2.runsettings
    visualStudioBootstrapperURI: $(bootstrapperUrl)
    testLabPoolName: VS-Platform
    dartLabEnvironment: ${{parameters.DartLabEnvironment}}
    visualStudioSigning: Test
    preTestMachineConfigurationStepList:
    - download: current
      artifact: RunSettings
      displayName: Download NuGet RunSettings
    preDeployAndRunTestsStepList:
    - download: current
      artifact: RunSettings
      displayName: Download NuGet RunSettings
